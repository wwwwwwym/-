{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport * as echarts from 'echarts';\nconst lineoption = {\n  title: {\n    text: 'Stacked Line',\n    left: 'center'\n  },\n  xAxis: {\n    type: 'category',\n    data: []\n  },\n  yAxis: {\n    type: 'value'\n  },\n  series: [{\n    name: '1号仓库',\n    type: 'line',\n    stack: 'Total',\n    data: []\n  }, {\n    name: '2号仓库',\n    type: 'line',\n    stack: 'Total',\n    data: []\n  }, {\n    name: '3号仓库',\n    type: 'line',\n    stack: 'Total',\n    data: []\n  }, {\n    name: '4号仓库',\n    type: 'line',\n    stack: 'Total',\n    data: []\n  }, {\n    name: '5号仓库',\n    type: 'line',\n    stack: 'Total',\n    data: []\n  }]\n};\nexport default {\n  name: 'app',\n  data() {\n    return {};\n  },\n  components: {},\n  methods: {},\n  mounted() {\n    //等待页面全部元素加载完再初始化，不然 会报错\n    let lineDom = document.getElementById('line');\n    let lineChart = echarts.init(lineDom);\n    lineChart.setOption(lineoption);\n    this.$request.get('/recordIn/charts').then(res => {\n      //      lineoption.xAxis.data = res.data?.map(v=>v.date) || [];\n      //      console.log(res.data)\n      //      lineoption.series[0].data = res.data?.map(v=>v.value) || [];\n      //      lineoption.series[1].data = res.data?.map(v=>v.value) || [];\n      //      lineoption.series[2].data = res.data?.map(v=>v.value) || [];\n      //      lineoption.series[3].data = res.data?.map(v=>v.value) || [];\n      //      lineoption.series[4].data = res.data?.map(v=>v.value) || [];\n\n      //      lineChart.setOption(lineoption);\n      //   })\n      // }\n      const data = res.data || [];\n\n      // 更新X轴数据\n      lineoption.xAxis.data = data.map(v => v.date);\n\n      // 更新每个仓库的数据\n      lineoption.series.forEach((series, index) => {\n        // 字段名：warehouse1, warehouse2...\n        const field = `warehouse${index + 1}`;\n        series.data = data.map(v => v[field] || 0);\n      });\n\n      // 重新渲染图表\n      lineChart.setOption(lineoption);\n    }).catch(error => {\n      console.error('获取图表数据失败:', error);\n    });\n  }\n};","map":{"version":3,"names":["echarts","lineoption","title","text","left","xAxis","type","data","yAxis","series","name","stack","components","methods","mounted","lineDom","document","getElementById","lineChart","init","setOption","$request","get","then","res","map","v","date","forEach","index","field","catch","error","console"],"sources":["src/components/manager_record/view_record.vue"],"sourcesContent":["<template>\r\n <div >\r\n   <el-row :gutter=\"10\">\r\n      <el-col :span=\"12\">\r\n         <el-card>\r\n            <div id=\"line\" style=\"width: 100%;height: 400px\"></div>\r\n         </el-card>\r\n      </el-col>\r\n\r\n      <el-col :span=\"12\">\r\n         <el-card>\r\n            <div>\r\n               \r\n            </div>\r\n         </el-card>\r\n      </el-col>\r\n   </el-row>\r\n\r\n </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\n\r\nconst lineoption = {\r\n  title: {\r\n    text: 'Stacked Line',\r\n    left:'center'\r\n  },\r\n\r\n  xAxis: {\r\n    type: 'category',\r\n    data: []\r\n  },\r\n  yAxis: {\r\n    type: 'value'\r\n  },\r\n  series: [\r\n    {\r\n      name: '1号仓库',\r\n      type: 'line',\r\n      stack: 'Total',\r\n      data: []\r\n    },\r\n    {\r\n      name: '2号仓库',\r\n      type: 'line',\r\n      stack: 'Total',\r\n      data: []\r\n    },\r\n    {\r\n      name: '3号仓库',\r\n      type: 'line',\r\n      stack: 'Total',\r\n      data: []\r\n    },\r\n    {\r\n      name: '4号仓库',\r\n      type: 'line',\r\n      stack: 'Total',\r\n      data: []\r\n    },\r\n    {\r\n      name: '5号仓库',\r\n      type: 'line',\r\n      stack: 'Total',\r\n      data: []\r\n    }\r\n  ]\r\n};\r\n\r\n export default {\r\n    name:'app',\r\n    data () {\r\n       return {\r\n\r\n       }\r\n    },\r\n    components: {\r\n\r\n    },\r\n    methods: { \r\n\r\n    },\r\n    mounted () {//等待页面全部元素加载完再初始化，不然 会报错\r\n      let lineDom = document.getElementById('line');\r\n      let lineChart = echarts.init(lineDom);\r\n      lineChart.setOption(lineoption);\r\n\r\n      this.$request.get('/recordIn/charts').then(res =>{\r\n    //      lineoption.xAxis.data = res.data?.map(v=>v.date) || [];\r\n    //      console.log(res.data)\r\n    //      lineoption.series[0].data = res.data?.map(v=>v.value) || [];\r\n    //      lineoption.series[1].data = res.data?.map(v=>v.value) || [];\r\n    //      lineoption.series[2].data = res.data?.map(v=>v.value) || [];\r\n    //      lineoption.series[3].data = res.data?.map(v=>v.value) || [];\r\n    //      lineoption.series[4].data = res.data?.map(v=>v.value) || [];\r\n\r\n    //      lineChart.setOption(lineoption);\r\n    //   })\r\n    // }\r\n    const data = res.data || [];\r\n        \r\n        // 更新X轴数据\r\n        lineoption.xAxis.data = data.map(v => v.date);\r\n        \r\n        // 更新每个仓库的数据\r\n        lineoption.series.forEach((series, index) => {\r\n            // 字段名：warehouse1, warehouse2...\r\n            const field = `warehouse${index + 1}`;\r\n            series.data = data.map(v => v[field] || 0);\r\n        });\r\n        \r\n        // 重新渲染图表\r\n        lineChart.setOption(lineoption);\r\n    }).catch(error => {\r\n        console.error('获取图表数据失败:', error);\r\n    })\r\n    }\r\n }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n \r\n</style>\r\n"],"mappings":";;;AAsBA,YAAAA,OAAA;AAEA,MAAAC,UAAA;EACAC,KAAA;IACAC,IAAA;IACAC,IAAA;EACA;EAEAC,KAAA;IACAC,IAAA;IACAC,IAAA;EACA;EACAC,KAAA;IACAF,IAAA;EACA;EACAG,MAAA,GACA;IACAC,IAAA;IACAJ,IAAA;IACAK,KAAA;IACAJ,IAAA;EACA,GACA;IACAG,IAAA;IACAJ,IAAA;IACAK,KAAA;IACAJ,IAAA;EACA,GACA;IACAG,IAAA;IACAJ,IAAA;IACAK,KAAA;IACAJ,IAAA;EACA,GACA;IACAG,IAAA;IACAJ,IAAA;IACAK,KAAA;IACAJ,IAAA;EACA,GACA;IACAG,IAAA;IACAJ,IAAA;IACAK,KAAA;IACAJ,IAAA;EACA;AAEA;AAEA;EACAG,IAAA;EACAH,KAAA;IACA,QAEA;EACA;EACAK,UAAA,GAEA;EACAC,OAAA,GAEA;EACAC,QAAA;IAAA;IACA,IAAAC,OAAA,GAAAC,QAAA,CAAAC,cAAA;IACA,IAAAC,SAAA,GAAAlB,OAAA,CAAAmB,IAAA,CAAAJ,OAAA;IACAG,SAAA,CAAAE,SAAA,CAAAnB,UAAA;IAEA,KAAAoB,QAAA,CAAAC,GAAA,qBAAAC,IAAA,CAAAC,GAAA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA,MAAAjB,IAAA,GAAAiB,GAAA,CAAAjB,IAAA;;MAEA;MACAN,UAAA,CAAAI,KAAA,CAAAE,IAAA,GAAAA,IAAA,CAAAkB,GAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAC,IAAA;;MAEA;MACA1B,UAAA,CAAAQ,MAAA,CAAAmB,OAAA,EAAAnB,MAAA,EAAAoB,KAAA;QACA;QACA,MAAAC,KAAA,eAAAD,KAAA;QACApB,MAAA,CAAAF,IAAA,GAAAA,IAAA,CAAAkB,GAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAI,KAAA;MACA;;MAEA;MACAZ,SAAA,CAAAE,SAAA,CAAAnB,UAAA;IACA,GAAA8B,KAAA,CAAAC,KAAA;MACAC,OAAA,CAAAD,KAAA,cAAAA,KAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}