{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport request from '@/request/request';\n// import request from '@/request/request'\nexport default {\n  name: 'user_register',\n  data() {\n    var checkName = (rule, value, callback) => {\n      if (value == '') {\n        return callback(new Error('用户名不能为空'));\n      }\n    };\n    var checkId = (rule, value, callback) => {\n      const num = Number(value);\n      if (isNaN(num)) {\n        // 检查是否为有效数字\n        return callback(new Error('请输入数字值')); // 返回并终止\n      }\n      if (!Number.isInteger(num)) {\n        // 检查是否为整数\n        return callback(new Error('必须为整数')); // 返回并终止\n      }\n      if (value.length !== 4) {\n        // 检查原始输入长度\n        return callback(new Error('必须是4位工号')); // 返回并终止\n      }\n    };\n    var validatePass = (rule, value, callback) => {\n      if (value === '') {\n        return callback(new Error('请输入密码'));\n      } else {\n        if (this.ruleForm.checkPass !== '') {\n          this.$refs.ruleForm.validateField('checkPass');\n        }\n        return callback();\n      }\n    };\n    var validatePass2 = (rule, value, callback) => {\n      if (value === '') {\n        return callback(new Error('请再次输入密码'));\n      } else if (value !== this.ruleForm.password) {\n        return callback(new Error('两次输入密码不一致!'));\n      } else {\n        return callback();\n      }\n    };\n    return {\n      ruleForm: {\n        password: '',\n        checkPass: '',\n        userid: '',\n        userName: ''\n      },\n      rules: {\n        password: [{\n          validator: validatePass,\n          trigger: 'blur'\n        }],\n        checkPass: [{\n          validator: validatePass2,\n          trigger: 'blur'\n        }],\n        userName: [{\n          validator: checkName,\n          trigger: 'blur'\n        }],\n        userid: [{\n          validator: checkId,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  components: {},\n  methods: {\n    submitForm(formName) {\n      console.log(\"submit...\");\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          console.log('valid:', valid);\n          request.post('/user/register', this.ruleForm).then(res => {\n            console.log('完整响应:', res);\n            if (res.code === 0) {\n              this.$notify.success(\"注册成功\");\n              this.$router.push(\"/login\");\n            } else {\n              this.$notify.error(res.msg);\n            }\n          });\n        } else {\n          console.log('error submit!!');\n          return false;\n        }\n      });\n    },\n    resetForm(formName) {\n      this.$refs[formName].resetFields();\n    },\n    tologin() {\n      this.$router.push({\n        path: '/login'\n      });\n    }\n  }\n};","map":{"version":3,"names":["request","name","data","checkName","rule","value","callback","Error","checkId","num","Number","isNaN","isInteger","length","validatePass","ruleForm","checkPass","$refs","validateField","validatePass2","password","userid","userName","rules","validator","trigger","components","methods","submitForm","formName","console","log","validate","valid","post","then","res","code","$notify","success","$router","push","error","msg","resetForm","resetFields","tologin","path"],"sources":["src/components/user_register.vue"],"sourcesContent":["<template>\r\n <div id='user_register'>\r\n  <div style=\"height:100vh; display:flex; justify-content:center; align-items:center;background-color:#8da1e2\">     \r\n    <div style=\"display:flex; align-items:center;justify-content:center; background-color:white; width:30% ; height:60%; border-radius:5px\">\r\n      <el-form :model=\"ruleForm\" style=\"width:80%;\" :rules=\"rules\" ref=\"ruleForm\"  class=\"demo-ruleForm\" >\r\n      <!-- <el-form > -->\r\n        <div style=\"font-size:20px ;font-weight:bold ; text-align:center;\">欢迎注册仓库管理系统</div>\r\n        <el-form-item prop=\"id\" style=\"margin-top:20px;\">\r\n            <el-input placeholder=\" 请输入工号\"  v-model=\"ruleForm.userid\"></el-input>\r\n        </el-form-item>\r\n        \r\n        <el-form-item prop=\"name\">\r\n            <el-input placeholder=\" 请输入姓名\" v-model=\"ruleForm.userName\"></el-input>\r\n        </el-form-item>\r\n\r\n        <el-form-item prop=\"password\">\r\n            <el-input placeholder=\" 请输入密码\" type=\"password\" v-model=\"ruleForm.passwrd\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item prop=\"checkPass\">\r\n            <el-input placeholder=\" 请再次输入密码\" type=\"password\" v-model=\"ruleForm.checkPass\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n        \r\n        <el-form-item>                      \r\n            <el-button type=\"primary\" @click=\"submit\">注册</el-button>\r\n            <el-button @click=\"resetForm('ruleForm')\">重置</el-button>\r\n        </el-form-item>\r\n        <div> <p class=\"text-center mt-3\">已有账号? <a href=\"#\"  @click=\"tologin\">点击登录</a></p></div>\r\n      </el-form>\r\n    </div>\r\n  </div>\r\n </div>\r\n</template>\r\n\r\n<script>\r\nimport request from '@/request/request';\r\n// import request from '@/request/request'\r\n export default {\r\n    name:'user_register',\r\n    data () {\r\n      var checkName = (rule, value, callback) => {\r\n        if (value=='') {\r\n          return callback(new Error('用户名不能为空'));\r\n        }\r\n      };\r\n      var checkId = (rule, value, callback) => {\r\n        const num = Number(value);\r\n        if (isNaN(num)) { // 检查是否为有效数字\r\n          return callback(new Error('请输入数字值')); // 返回并终止\r\n        }\r\n\r\n        if (!Number.isInteger(num)) { // 检查是否为整数\r\n          return callback(new Error('必须为整数')); // 返回并终止\r\n        }\r\n\r\n        if (value.length !== 4) { // 检查原始输入长度\r\n          return callback(new Error('必须是4位工号')); // 返回并终止\r\n        }\r\n      };\r\n      var validatePass = (rule, value, callback) => {\r\n        if (value === '') {\r\n          return callback(new Error('请输入密码'));\r\n        } else {\r\n          if (this.ruleForm.checkPass !== '') {\r\n            this.$refs.ruleForm.validateField('checkPass');\r\n          }\r\n          return callback();\r\n        }\r\n      };\r\n      var validatePass2 = (rule, value, callback) => {\r\n        if (value === '') {\r\n          return callback(new Error('请再次输入密码'));\r\n        } else if (value !== this.ruleForm.password) {\r\n          return callback(new Error('两次输入密码不一致!'));\r\n        } else {\r\n          return callback();\r\n        }\r\n      };\r\n\r\n\r\n\r\n       return {\r\n        ruleForm: {\r\n          password: '',\r\n          checkPass: '',\r\n          userid: '',\r\n          userName: '',\r\n       },\r\n       rules: {\r\n          password: [\r\n            { validator: validatePass, trigger: 'blur' }\r\n          ],\r\n          checkPass: [\r\n            { validator: validatePass2, trigger: 'blur' }\r\n          ],\r\n          userName: [\r\n            { validator: checkName, trigger: 'blur' }\r\n          ],\r\n          userid: [\r\n            { validator: checkId, trigger: 'blur' }\r\n          ],\r\n        }\r\n       };\r\n    },\r\n    components: {\r\n\r\n    },\r\n    methods: { \r\n      submitForm(formName) {\r\n        console.log(\"submit...\")\r\n        this.$refs[formName].validate((valid) => {\r\n          if (valid) {\r\n            console.log('valid:', valid);\r\n            request.post('/user/register',this.ruleForm).then(res=>{\r\n              console.log('完整响应:', res);\r\n              if(res.code===0){\r\n                this.$notify.success(\"注册成功\")\r\n                this.$router.push(\"/login\")\r\n              }else{\r\n                this.$notify.error(res.msg)\r\n              }\r\n            })\r\n          } else {\r\n            console.log('error submit!!');\r\n            return false;\r\n          }\r\n        });\r\n      },\r\n      resetForm(formName) {\r\n        this.$refs[formName].resetFields();\r\n      },\r\n      tologin(){\r\n        this.$router.push({path:'/login'})\r\n      }\r\n\r\n    }\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* .demo-ruleForm{\r\n    margin: 0 auto;      \r\n    padding: 20px;\r\n    margin-top:250px;\r\n} */\r\n\r\n.el-form-item {\r\n  margin-top: 22px;\r\n}              \r\n \r\n</style>\r\n"],"mappings":";AAkCA,OAAAA,OAAA;AACA;AACA;EACAC,IAAA;EACAC,KAAA;IACA,IAAAC,SAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA;QACA,OAAAC,QAAA,KAAAC,KAAA;MACA;IACA;IACA,IAAAC,OAAA,GAAAA,CAAAJ,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,MAAAG,GAAA,GAAAC,MAAA,CAAAL,KAAA;MACA,IAAAM,KAAA,CAAAF,GAAA;QAAA;QACA,OAAAH,QAAA,KAAAC,KAAA;MACA;MAEA,KAAAG,MAAA,CAAAE,SAAA,CAAAH,GAAA;QAAA;QACA,OAAAH,QAAA,KAAAC,KAAA;MACA;MAEA,IAAAF,KAAA,CAAAQ,MAAA;QAAA;QACA,OAAAP,QAAA,KAAAC,KAAA;MACA;IACA;IACA,IAAAO,YAAA,GAAAA,CAAAV,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA;QACA,OAAAC,QAAA,KAAAC,KAAA;MACA;QACA,SAAAQ,QAAA,CAAAC,SAAA;UACA,KAAAC,KAAA,CAAAF,QAAA,CAAAG,aAAA;QACA;QACA,OAAAZ,QAAA;MACA;IACA;IACA,IAAAa,aAAA,GAAAA,CAAAf,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA;QACA,OAAAC,QAAA,KAAAC,KAAA;MACA,WAAAF,KAAA,UAAAU,QAAA,CAAAK,QAAA;QACA,OAAAd,QAAA,KAAAC,KAAA;MACA;QACA,OAAAD,QAAA;MACA;IACA;IAIA;MACAS,QAAA;QACAK,QAAA;QACAJ,SAAA;QACAK,MAAA;QACAC,QAAA;MACA;MACAC,KAAA;QACAH,QAAA,GACA;UAAAI,SAAA,EAAAV,YAAA;UAAAW,OAAA;QAAA,EACA;QACAT,SAAA,GACA;UAAAQ,SAAA,EAAAL,aAAA;UAAAM,OAAA;QAAA,EACA;QACAH,QAAA,GACA;UAAAE,SAAA,EAAArB,SAAA;UAAAsB,OAAA;QAAA,EACA;QACAJ,MAAA,GACA;UAAAG,SAAA,EAAAhB,OAAA;UAAAiB,OAAA;QAAA;MAEA;IACA;EACA;EACAC,UAAA,GAEA;EACAC,OAAA;IACAC,WAAAC,QAAA;MACAC,OAAA,CAAAC,GAAA;MACA,KAAAd,KAAA,CAAAY,QAAA,EAAAG,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACAH,OAAA,CAAAC,GAAA,WAAAE,KAAA;UACAjC,OAAA,CAAAkC,IAAA,wBAAAnB,QAAA,EAAAoB,IAAA,CAAAC,GAAA;YACAN,OAAA,CAAAC,GAAA,UAAAK,GAAA;YACA,IAAAA,GAAA,CAAAC,IAAA;cACA,KAAAC,OAAA,CAAAC,OAAA;cACA,KAAAC,OAAA,CAAAC,IAAA;YACA;cACA,KAAAH,OAAA,CAAAI,KAAA,CAAAN,GAAA,CAAAO,GAAA;YACA;UACA;QACA;UACAb,OAAA,CAAAC,GAAA;UACA;QACA;MACA;IACA;IACAa,UAAAf,QAAA;MACA,KAAAZ,KAAA,CAAAY,QAAA,EAAAgB,WAAA;IACA;IACAC,QAAA;MACA,KAAAN,OAAA,CAAAC,IAAA;QAAAM,IAAA;MAAA;IACA;EAEA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}