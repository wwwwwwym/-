{"ast":null,"code":"import axios from 'axios';\n// import router from '@/router/router';\n// 封装 baseURL\nconst request = axios.create({\n  baseURL: \"http://localhost:9000\",\n  timeout: 5000\n});\n\n//reuqest 拦截器\n//可以自请求发送前对请求数据做处理，例如统一加token，统一设置请求头等\n// request.interceptors.request.use(config => {\n//     config.headers['Content-Type'] = 'application/json;charset=UTF-8';\n\n//     let user= JSON.parse(localStorage.getItem(\"user\") ||'{}');//从当前缓存获取token\n//     config.headers['token'] = user.token;//如果有token就把token设置为请求头\n//     return config\n// },error => {\n//     return Promise.reject(error)\n// });\n\n// //request 拦截器可以在响应后统一处理结果\n// request.interceptors.response.use(response => {\n//     console.log(response);\n//     let res=response.data;\n//     if(typeof res === 'string')\n//     {\n//         res=res ? JSON.parse(res) : res\n//     }\n//     if(res.code === 1 && (res.msg === 'token无效,请重新登录' || res.msg === 'token验证失败,请重新登录'))\n//     // if(res.code === 401)\n//     {\n//         // 401 跳转到登录页面\n//         localStorage.removeItem('user');\n//         router.push('/login')\n//     }\n//     return res;\n// },error => {\n//     console.log('err'+ error)\n//     return Promise.reject(error)\n// })\n// 向外暴露 request\nexport default request;","map":{"version":3,"names":["axios","request","create","baseURL","timeout"],"sources":["D:/MyWMS/wms_vue/src/request/request.js"],"sourcesContent":["import axios from 'axios'\r\n// import router from '@/router/router';\r\n// 封装 baseURL\r\nconst request = axios.create({\r\nbaseURL:\"http://localhost:9000\",\r\ntimeout:5000\r\n})\r\n\r\n//reuqest 拦截器\r\n//可以自请求发送前对请求数据做处理，例如统一加token，统一设置请求头等\r\n// request.interceptors.request.use(config => {\r\n//     config.headers['Content-Type'] = 'application/json;charset=UTF-8';\r\n\r\n//     let user= JSON.parse(localStorage.getItem(\"user\") ||'{}');//从当前缓存获取token\r\n//     config.headers['token'] = user.token;//如果有token就把token设置为请求头\r\n//     return config\r\n// },error => {\r\n//     return Promise.reject(error)\r\n// });\r\n\r\n// //request 拦截器可以在响应后统一处理结果\r\n// request.interceptors.response.use(response => {\r\n//     console.log(response);\r\n//     let res=response.data;\r\n//     if(typeof res === 'string')\r\n//     {\r\n//         res=res ? JSON.parse(res) : res\r\n//     }\r\n//     if(res.code === 1 && (res.msg === 'token无效,请重新登录' || res.msg === 'token验证失败,请重新登录'))\r\n//     // if(res.code === 401)\r\n//     {\r\n//         // 401 跳转到登录页面\r\n//         localStorage.removeItem('user');\r\n//         router.push('/login')\r\n//     }\r\n//     return res;\r\n// },error => {\r\n//     console.log('err'+ error)\r\n//     return Promise.reject(error)\r\n// })\r\n// 向外暴露 request\r\nexport default request;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA;AACA,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAC,uBAAuB;EAC/BC,OAAO,EAAC;AACR,CAAC,CAAC;;AAEF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeH,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}