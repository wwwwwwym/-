{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport request from '@/request/request';\n// import request from '@/request/request'\nexport default {\n  name: 'register',\n  data() {\n    return {\n      ruleForm: {\n        password: '',\n        checkPass: '',\n        userid: '',\n        userName: ''\n      }\n      //  rules: {\n      //     pass: [\n      //       { required: true, message: '输入密码', trigger: 'blur' },\n      //       {\n      //         validator : (rule, value, callback) => {\n      //         if (value === '') {\n      //           callback(new Error('请输入密码'));\n      //         }\n      //         // else {\n      //         //   if (this.ruleForm.checkPass !== '') {\n      //         //     this.$refs.ruleForm.validateField('checkPass');\n      //         //   }\n      //         //   callback();\n      //         // }\n      //       },\n      //       trigger: ['blur'] }\n      //     ],\n      //     checkPass: [\n      //       { required: true, message: '请再次输入密码', trigger: 'blur' },\n      //       {validator : (rule, value, callback) => {\n      //         if (value === '') {\n      //           callback(new Error('请再次输入密码'));\n      //         } else if (value !== this.ruleForm.pass) {\n      //           callback(new Error('两次输入密码不一致!'));\n      //         } else {\n      //           callback();\n      //         }\n      //       },\n      //       trigger: ['blur'] }\n      //     ],\n      //     id: [\n      //       { required: true, message: '请输入工号', trigger: 'blur' },\n      //       { validator: (rule, value, callback) => {\n      //           if (typeof value !== 'number' || isNaN(value)) {\n      //               callback(new Error('必须输入数字'));\n      //           } else if (value.length !== 4) {\n      //               callback(new Error('必须是4位数字值'));\n      //           } else {\n      //               callback();\n      //           }\n      //         },\n      //       trigger: ['blur'] }\n      //     ],\n      //     name: [\n      //       { required: true, message: '请输入用户名', trigger: 'blur' }, \n      //     ]\n      //   }\n    };\n  },\n  components: {},\n  methods: {\n    submit() {\n      request.post(\"/user/register\", this.ruleForm).then(res => {\n        if (res.code == 0) {\n          this.$notify.success(\"注册成功\");\n          this.$router.push({\n            path: '/login'\n          });\n        } else {\n          this.$notify.error(\"res.msg\");\n        }\n      });\n    },\n    resetForm(formName) {\n      this.$refs[formName].resetFields();\n    },\n    tologin() {\n      this.$router.push({\n        path: '/login'\n      });\n    }\n  }\n};","map":{"version":3,"names":["request","name","data","ruleForm","password","checkPass","userid","userName","components","methods","submit","post","then","res","code","$notify","success","$router","push","path","error","resetForm","formName","$refs","resetFields","tologin"],"sources":["src/components/register.vue"],"sourcesContent":["<template>\r\n <div >\r\n  <div style=\"height:100vh; diaplay:flex; justify-content:center; align-items:center ;background-color:#a8b4e1;\">\r\n    <h2 class=\"text-center\">注册</h2>\r\n    <el-form :model=\"ruleForm\" status-icon :rules=\"rules\" ref=\"ruleForm\" label-width=\"100px\" class=\"demo-ruleForm\" style=\"width:400px\">\r\n    \r\n    <el-form-item label=\"工号\" prop=\"id\">\r\n        <el-input v-model.number=\"ruleForm.userid\"></el-input>\r\n    </el-form-item>\r\n    \r\n    <el-form-item label=\"用户名\" prop=\"name\">\r\n        <el-input v-model=\"ruleForm.userName\"></el-input>\r\n    </el-form-item>\r\n\r\n    <el-form-item label=\"密码\" prop=\"pass\">\r\n        <el-input type=\"password\" v-model=\"ruleForm.passwrd\" autocomplete=\"off\"></el-input>\r\n    </el-form-item>\r\n    <el-form-item label=\"确认密码\" prop=\"checkPass\">\r\n        <el-input type=\"password\" v-model=\"ruleForm.checkPass\" autocomplete=\"off\"></el-input>\r\n    </el-form-item>\r\n    \r\n    <el-form-item>                      \r\n        <el-button type=\"primary\" @click=\"submit\">注册</el-button>\r\n        <el-button @click=\"resetForm('ruleForm')\">重置</el-button>\r\n    </el-form-item>\r\n\r\n    <p class=\"text-center mt-3\">已有账号? <a href=\"#\"  @click=\"tologin\">点击登录</a></p>\r\n    </el-form>\r\n  </div>\r\n </div>\r\n</template>\r\n\r\n<script>\r\nimport request from '@/request/request';\r\n// import request from '@/request/request'\r\n export default {\r\n    name:'register',\r\n    data () {\r\n       return {\r\n        ruleForm: {\r\n          password: '',\r\n          checkPass: '',\r\n          userid: '',\r\n          userName: '',\r\n       },\r\n      //  rules: {\r\n      //     pass: [\r\n      //       { required: true, message: '输入密码', trigger: 'blur' },\r\n      //       {\r\n      //         validator : (rule, value, callback) => {\r\n      //         if (value === '') {\r\n      //           callback(new Error('请输入密码'));\r\n      //         }\r\n      //         // else {\r\n      //         //   if (this.ruleForm.checkPass !== '') {\r\n      //         //     this.$refs.ruleForm.validateField('checkPass');\r\n      //         //   }\r\n      //         //   callback();\r\n      //         // }\r\n      //       },\r\n      //       trigger: ['blur'] }\r\n      //     ],\r\n      //     checkPass: [\r\n      //       { required: true, message: '请再次输入密码', trigger: 'blur' },\r\n      //       {validator : (rule, value, callback) => {\r\n      //         if (value === '') {\r\n      //           callback(new Error('请再次输入密码'));\r\n      //         } else if (value !== this.ruleForm.pass) {\r\n      //           callback(new Error('两次输入密码不一致!'));\r\n      //         } else {\r\n      //           callback();\r\n      //         }\r\n      //       },\r\n      //       trigger: ['blur'] }\r\n      //     ],\r\n      //     id: [\r\n      //       { required: true, message: '请输入工号', trigger: 'blur' },\r\n      //       { validator: (rule, value, callback) => {\r\n      //           if (typeof value !== 'number' || isNaN(value)) {\r\n      //               callback(new Error('必须输入数字'));\r\n      //           } else if (value.length !== 4) {\r\n      //               callback(new Error('必须是4位数字值'));\r\n      //           } else {\r\n      //               callback();\r\n      //           }\r\n      //         },\r\n      //       trigger: ['blur'] }\r\n      //     ],\r\n      //     name: [\r\n      //       { required: true, message: '请输入用户名', trigger: 'blur' }, \r\n      //     ]\r\n      //   }\r\n       };\r\n    },\r\n    components: {\r\n\r\n    },\r\n    methods: { \r\n      submit(){\r\n        request.post(\"/user/register\",this.ruleForm).then(res=>{\r\n          if(res.code==0){\r\n            this.$notify.success(\"注册成功\")\r\n            this.$router.push({path:'/login'})\r\n          }else{\r\n            this.$notify.error(\"res.msg\")\r\n          }\r\n        })\r\n      },\r\n      resetForm(formName) {\r\n        this.$refs[formName].resetFields();\r\n      },\r\n      tologin(){\r\n        this.$router.push({path:'/login'})\r\n      }\r\n\r\n    }\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.demo-ruleForm{\r\n    margin: 0 auto;        /* 水平居中 */\r\n    padding: 20px;\r\n    margin-top:250px;\r\n    border: 1px solid #e6e8f0;\r\n}\r\n\r\n.el-form-item {\r\n  margin-bottom: 22px; /* 默认是 18px，增加间距 */\r\n  text-align: left;\r\n}              \r\n \r\n</style>\r\n"],"mappings":";AAiCA,OAAAA,OAAA;AACA;AACA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,QAAA;QACAC,QAAA;QACAC,SAAA;QACAC,MAAA;QACAC,QAAA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;EACA;EACAC,UAAA,GAEA;EACAC,OAAA;IACAC,OAAA;MACAV,OAAA,CAAAW,IAAA,wBAAAR,QAAA,EAAAS,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAAC,IAAA;UACA,KAAAC,OAAA,CAAAC,OAAA;UACA,KAAAC,OAAA,CAAAC,IAAA;YAAAC,IAAA;UAAA;QACA;UACA,KAAAJ,OAAA,CAAAK,KAAA;QACA;MACA;IACA;IACAC,UAAAC,QAAA;MACA,KAAAC,KAAA,CAAAD,QAAA,EAAAE,WAAA;IACA;IACAC,QAAA;MACA,KAAAR,OAAA,CAAAC,IAAA;QAAAC,IAAA;MAAA;IACA;EAEA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}