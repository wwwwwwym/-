{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import axios from 'axios'\n// import router from '@/router/router';\n// // 封装 baseURL\n// const request = axios.create({\n// baseURL:\"http://localhost:9000\",\n// timeout:5000\n// })\n\n//reuqest 拦截器\n//可以自请求发送前对请求数据做处理，例如统一加token，统一设置请求头等\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=UTF-8';\n  const token = localStorage.getItem('token'); //从当前缓存获取token\n  if (token) {\n    config.headers['token'] = token; //如果有token就把token设置为请求头\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n//request 拦截器可以在响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  let res = response.data;\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  if (res.code === 401) {\n    // 401 清除token信息并跳转到登录页面\n    localStorage.removeItem('token');\n    router.push('/login').catch(() => {});\n  }\n  return res;\n}, error => {\n  console.log('err' + error);\n  return Promise.reject(error);\n});\n// 向外暴露 request\nexport default request;","map":{"version":3,"names":["request","interceptors","use","config","headers","token","localStorage","getItem","error","Promise","reject","response","res","data","JSON","parse","code","removeItem","router","push","catch","console","log"],"sources":["D:/WMS/wms_vue/src/request/request.js"],"sourcesContent":["// import axios from 'axios'\r\n// import router from '@/router/router';\r\n// // 封装 baseURL\r\n// const request = axios.create({\r\n// baseURL:\"http://localhost:9000\",\r\n// timeout:5000\r\n// })\r\n\r\n//reuqest 拦截器\r\n//可以自请求发送前对请求数据做处理，例如统一加token，统一设置请求头等\r\nrequest.interceptors.request.use(config => {\r\n    config.headers['Content-Type'] = 'application/json;charset=UTF-8';\r\n\r\n    const token = localStorage.getItem('token');//从当前缓存获取token\r\n    if(token){\r\n        config.headers['token'] = token;//如果有token就把token设置为请求头\r\n    }\r\n    return config\r\n},error => {\r\n    return Promise.reject(error)\r\n});\r\n\r\n//request 拦截器可以在响应后统一处理结果\r\nrequest.interceptors.response.use(response => {\r\n    let res=response.data;\r\n    if(typeof res === 'string')\r\n    {\r\n        res=res ? JSON.parse(res) : res\r\n    }\r\n    if(res.code === 401)\r\n    {\r\n        // 401 清除token信息并跳转到登录页面\r\n        localStorage.removeItem('token');\r\n        router.push('/login').catch(() => {})\r\n    }\r\n    return res;\r\n},error => {\r\n    console.log('err'+ error)\r\n    return Promise.reject(error)\r\n})\r\n// 向外暴露 request\r\nexport default request;"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACAA,OAAO,CAACC,YAAY,CAACD,OAAO,CAACE,GAAG,CAACC,MAAM,IAAI;EACvCA,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC;EAEjE,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EAC5C,IAAGF,KAAK,EAAC;IACLF,MAAM,CAACC,OAAO,CAAC,OAAO,CAAC,GAAGC,KAAK,CAAC;EACpC;EACA,OAAOF,MAAM;AACjB,CAAC,EAACK,KAAK,IAAI;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;;AAEF;AACAR,OAAO,CAACC,YAAY,CAACU,QAAQ,CAACT,GAAG,CAACS,QAAQ,IAAI;EAC1C,IAAIC,GAAG,GAACD,QAAQ,CAACE,IAAI;EACrB,IAAG,OAAOD,GAAG,KAAK,QAAQ,EAC1B;IACIA,GAAG,GAACA,GAAG,GAAGE,IAAI,CAACC,KAAK,CAACH,GAAG,CAAC,GAAGA,GAAG;EACnC;EACA,IAAGA,GAAG,CAACI,IAAI,KAAK,GAAG,EACnB;IACI;IACAV,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC;IAChCC,MAAM,CAACC,IAAI,CAAC,QAAQ,CAAC,CAACC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;EACzC;EACA,OAAOR,GAAG;AACd,CAAC,EAACJ,KAAK,IAAI;EACPa,OAAO,CAACC,GAAG,CAAC,KAAK,GAAEd,KAAK,CAAC;EACzB,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;AACF;AACA,eAAeR,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}